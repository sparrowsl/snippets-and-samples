// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const allURLs = `-- name: AllURLs :many
SELECT id, short_url, long_url, visited FROM urls
ORDER BY id DESC
`

func (q *Queries) AllURLs(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, allURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.ShortUrl,
			&i.LongUrl,
			&i.Visited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createURL = `-- name: CreateURL :one
INSERT INTO urls (short_url, long_url)
VALUES (?, ?)
RETURNING id, short_url, long_url, visited
`

type CreateURLParams struct {
	ShortUrl string `db:"short_url" json:"short_url"`
	LongUrl  string `db:"long_url" json:"long_url"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL, arg.ShortUrl, arg.LongUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.Visited,
	)
	return i, err
}

const getOneURL = `-- name: GetOneURL :one
SELECT id, short_url, long_url, visited FROM urls
WHERE short_url = ?
LIMIT 1
`

func (q *Queries) GetOneURL(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getOneURL, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.Visited,
	)
	return i, err
}

const updateVisited = `-- name: UpdateVisited :exec
UPDATE urls
SET visited = ?
WHERE short_url = ?
`

type UpdateVisitedParams struct {
	Visited  int64  `db:"visited" json:"visited"`
	ShortUrl string `db:"short_url" json:"short_url"`
}

func (q *Queries) UpdateVisited(ctx context.Context, arg UpdateVisitedParams) error {
	_, err := q.db.ExecContext(ctx, updateVisited, arg.Visited, arg.ShortUrl)
	return err
}
